#!/usr/bin/perl
#!/usr/local/bin/perl 

## NOTICE
## Is this script failing due to /secoperl missing?
## http://twiki.corp.yahoo.com/view/YSTProdEng/SecoPerl


#  mobius - run a command in a loop, catch errors and exit
#  $Id: //depot/manatee/main/tools/bin/mobius#5 $
#
use strict;
use Getopt::Long;
use Pod::Usage;

use POSIX qw(ceil);

$|++;

use vars qw ( %cmdopts $noexec $verbose $loopdelay $mail $looptimes $command $subject $output $show_usage $show_man $tmpoutput $success_mail $keepoutput $timespec $looptime)  ;


Getopt::Long::Configure("pass_through") ;

GetOptions (
	'h'				=> \$show_usage,
	'man'			=> \$show_man,
	'n' 			=> \$noexec,
	"v|verbose" 	=> \$verbose, 
	"d|delay=i"		=> \$loopdelay,
	"i|iterations=i" => \$looptimes,
	"t|time=s"	 => \$timespec,
	"m|mail=s" 		=> \$mail,
	"success=s" 	=> \$success_mail,
	"s|subject=s" 	=> \$subject,
	"o|output=s" 	=> \$output,
	"keepoutput=s" 	=> \$keepoutput,
) || pod2usage(2) ;



#if ($show_usage) { usage(); }
pod2usage(1) if $show_usage;
pod2usage(-exitstatus => 0, -verbose => 2) if $show_man;


$loopdelay ||= 300 ;
$looptimes ||= "5";

if ($timespec) {
	$looptime = parse_time($timespec);
	my $seconds = $looptime * 86400;
	$looptimes = ceil ( $seconds / $loopdelay);
}


if ($#ARGV < 0) { pod2usage(1); } 



$command = shift (@ARGV) ;

if (! defined $command) { 
	pod2usage(1); 
}


print "Command: $command \n";

ITERATION: for (my $index = 0; 1 ; $index++)

{

#
#  If user asked for mail but didn't send the output to a file
#  explicity, setup a tmp file
#
if ( ( defined $mail || defined $success_mail) &&  (!defined $output ) ) {
	$output = "/tmp/$0.mailoutput.$$." . time;
	$tmpoutput=1; # remember this for later so it can be unlinked
}


if ($output) {

	if ($keepoutput) {
		if ( -e $output . "." . $keepoutput ) {
			print "unlink $output.$keepoutput\n";
		}

		for ( my $fileno = $keepoutput -1 ; $fileno >= 0; $fileno--) { 
			if ($fileno == 0) {
				if (-e $output ) {
					rename $output,  "$output.$fileno" ;
				}
			}
			else {
				my $next = $fileno - 1;
				if (-e $output . "." . $next) {
					my $old = "$output.$next" ;
					my $new = "$output.$fileno" ;
					rename $old , $new ;
				}
			}	
		}

	}
	print "Redirecting output to $output ...\n";

	open(STDOUT,">$output") || die "Unable to redirect STDOUT to $output $!\n";
	open(STDERR,">$output") || die "Unable to redirect STDERR to $output $!\n";
}


	my $thiscommand = $command ;
	$thiscommand =~ s/{{([a-z]*)}}/\xff\xff$1\xff\xff/g;
	$thiscommand =~ s/{q}/"/g;
	$thiscommand =~ s/{sq}/'/g;
	$thiscommand =~ s/{bq}/\`/g;
	$thiscommand =~ s/{i}/$index/g;
	$thiscommand =~ s/\xff\xff([a-z]*)\xff\xff/{$1}/g;

	print "INFO: $0 Loop Iteration: $index\n";
	print "-" x 40 . "\n\n" ;
	run_cmd($thiscommand);



    if ($success_mail) {
        $subject ||= "$0 Command \"$command\" completed";
		my $message = "Command: $command\n";
        sendmail($success_mail, $subject , $message, $output);
    } 


	if ($tmpoutput) { unlink $output; }

	if ( ($looptimes != -1)  && ( $index+1 >= $looptimes ) ) 
	{ 
		last ITERATION; 
	}
	sleep $loopdelay;

}


sub run_cmd {

    my ($command) = @_;

    if ($noexec) { print "# $command\n\n"; }
    else {
        if ($verbose) { print "# $command\n"; }
        system($command) ;
        if ($? != 0) {
            my $exitcode = $? >> 8 ;
		croak ("$0: \"$command\" generated a !0 exit code of: ($exitcode). Exiting ..\n") ;
        exit($?);
        }
    }

}

sub croak {

	my ($message) = @_;

	my $hostname = `hostname` ;
	chomp $hostname;

    if ($mail) {
		$subject ||= "$0 failed on $hostname";	
        sendmail($mail, $subject , $message, $output);
    } 
	else {
		print STDERR "$message\n";
	}
	if (defined $tmpoutput) { unlink $output; }


	exit -1;
}


sub sendmail {
    my ($mail, $subject, $message , $file) = @_;

    if (eval(open(SM,"|/usr/lib/sendmail $mail"))) {
        print SM "From: seco\@inktomi.com ($0)\n";
        print SM "To: $mail\n";
        print SM "Subject: $subject\n\n";
        print SM $message;

		if ( defined $file) {
			print SM `/usr/bin/cat $file`;
		}
        close(SM);
    }
}


sub parse_time {
    my($range) = shift(@_);
    my ($d, $h, $m);
    my $new_range;

    if ($range =~ /:/) {

        ($h,$m) = ($range =~/^(\d*)\:(\d*)$/ );
        my ($sec,$min,$hours,$mday,$mon,$year) = localtime();

        $h = $hours - $h;
        $m = $min - $m;
            $new_range = ($h / 24) + ($m/1440) ;
    }

    else {

    # grabs out the hours and minutes from input.
    ($d,$h,$m) = ($range =~ /(?:((?:\d|\.)*)d)?\s*(?:((?:\d|\.)*)h)?\s*(?:((?:\d|\.)*)m)?/);


    $new_range = $d + ($h / 24) + ($m/1440) ;

    }

    return $new_range;
}


__END__

=head1 NAME

mobius - run a command in a loop

=head1 SYNOPSYS

mobius [options] "command"

=head1 OPTIONS

mobius [options] "command"

=over 8

=item B<-h>

Print a brief help message and exit

=item B<-man>

Print the manual page and exit (detailed help)

=item B<-n>

Do not actually run the command (no exec mode)

=item B<-v|-verbose>

Turn on verbose display

=item B<-d|-delay> #

The number of seconds to pause between iterations 
Default: 300 seconds

=item B<-i|-iterations> #

How many times to iterate the command.
Default: 5 - Specify -1 for infinite (BE CAREFUL! Do not Rip Van Winkle watchers please)

=item B<-t|-time> #

How long to iterate. If used this overrides -i with ceil(time / delay)
Example usage is -t 1d12h15m   
Default: none

=item B<-m|-mail> email

Where to send mail if command fails (non zero exit)
Default: none

=item B<-success> email

Where to send e-mail if the command completes successfully.
Default: none

=item B<-s|-subject> string

Subject for use in the outgoing e-mails 

=item B<-o> file

Redirect output to this file

=item B<-keepoutput> #

The number of output files to keep around on disk (for use with -o).
Renamed old output files .0, .1 , .n


=head1 FEATURES

Inside the "command" the standard allssh/fornode substituations
can be made (except {} for host:

=over 8

=item {q} 

inserts: "

=item {sq} 

inserts: '

=item {bq} 

inserts: `

=item {i} 

inserts: iteration/index # starting at 0

=cut
