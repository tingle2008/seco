#!/usr/bin/perl
#!/usr/local/bin/perl

use Seco::FnSeco;
use Getopt::Long;
use Socket;
use Seco::Allssh;
use strict;
use Data::Dumper;

use vars qw(%netblocks %nodes $errors) ;



$|=1;


my(%argv,%input,$usage);

$usage = "
Short usage: 
 $0 -r \$FOO \\
  --path sourcehost::mountpoint/fileordir

This will automatically set --source --dest and --rsource;
complete help can be found by using --help2 .

A useful example,
  multiphasic-duplicate -r range --source <hostname>:/home/admin/hadoop_hbase --dest /home/admin --rsource :/home/admin/hadoop_hbase --verbose
  (NOTE: use '/home/admin/hadoop_hbase', do not plus '/' at the end)

";


%input=( "c|cluster=s" => "cluster (optional, faster running)",
 "r|range=s" => "range of hosts to enable/disable (required argument)",
 "x=s" => "exclude this range (optional)",
 "exclude=s@" => "exclude this path or file (given to rsync)",
 "source=s" => "source rsync url, ie haides::ec/foo ",
 "dest=s" => "destination path, such as /export/crawlspace/.",
 "rsource=s" => "secondary source path, ie ::ec/foo",
 "path=s" => "magically populate --source --dest and --rsource",
 "delete" => "use rsync --delete (dangerous)",
 "n|nomodify" => "don't actually delete anything - just print steps taken",
 "v|verbose" => "spew extra data to the screen",
 "h|help" => "show option help",
 "H|help2|morehelp" => "show all options",
 "release" => "push target of symlink first, then symlink second",
 "compress" => "compress the first node for each data center",
 "compressalways" => "compress always, regardless. CHEWS CPU.",
 "extra=s" => "extra args to add to rsync (will be passed to a SHELL, escape appropriately)",
 "safe" => "use --inkt-send-safe and --inkt-recv-safe",
 "m=i" => "max inflight processes (lowers admin + network traffic)",
 "p=i" => "specify how long to pause between connections",
 "z=i" => "max time to allow child processes to run",
 "Q" => "print only errors, not successes",
 "s" => "don't delete log files for hosts that failed",
 "V" => "allssh.pl -V (prints error output including command)", 
 "ping=s" => "ping first (port number or 'icmp' if root)",
 "uid=s" => "demote to running as this user (must be root first)",
 "randomize","distribute sorted by last digit first",
);

my $result = GetOptions(\%argv,keys %input);
$argv{"v"} ||= $argv{"n"};
$argv{"path"} = shift @ARGV
  if ((scalar @ARGV) && 
     (! (($argv{"path"}) || ($argv{"source"}) || ($argv{"rsource"}) || ($argv{"dest"}))));

my @nodes = standardNodesParser($argv{"c"},$argv{"r"},$argv{"x"});
my $range = CompressRange(map{$_=>1} @nodes);

if (!$result) {
  print "Invalid options!\n\n";
  &showUsage; exit 1;
}
if ($argv{"h"}) {
   print "help requested\n\n";
  &showUsage; exit 0;
}
if ($argv{"H"}) {
   print "help requested\n\n";
  &showOptionsHelp; exit 0;
}

if (! scalar @nodes) {
    print "No destinations given (or resolved)\n\n";
    &showUsage; exit 1;
}

doanotherpath:

if ($argv{"path"}) {
  magicpath($argv{"path"});
}

if (scalar @ARGV) {
   print "Unexpected extra ARGV @ARGV\n\n";
   &showUsage(); exit 1;
}


unless ( ( defined $argv{"source"} ) &&
         ( defined $argv{"dest"} ) && 
         ( defined $argv{"rsource"} ) ) {
   print "Missing --source, --dest, --rsource, or preferably --path\n";
   &showOptionsHelp; exit 1;
}

#foreach (@nodes) { 
#  my $colo = whoismydatacenter($_);
#  $nodes{$colo}{$_}=1;
#}

foreach (@nodes) { 
  my $colo = "TB";
  $nodes{$colo}{$_}=1;
}
my $colo;
foreach $colo (sort keys %nodes) {
   print "\n";  
   print "INFO: Processing colo $colo\n";
   @nodes = sort keys %{$nodes{$colo}};
   $range = CompressRange(%{$nodes{$colo}});
   print "INFO: colo $colo range $range\n";

   print "INFO: Setting up allssh\n";
   my $allssh = new Allssh;


   if ($argv{"uid"}) {
     if ($< =~ m/0/) {
        my  ($name,$passwd,$uid,$gid)  = getpwnam($argv{"uid"});
        if ($name =~ m/./) {
           $allssh->setuid($uid);
           print STDERR "now running as user $argv{uid} (user $uid)\n" if ($argv{"v"});
        } else {
           die "Could not locate username $argv{uid} to set uid to\n";
        }
     } else {
        print STDERR "must run as root, not user $<, to specify -uid \$user\n";
        exit 1;
     }
   }

   $SIG{'INT'} = sub {
     my ($i);
     foreach $i ( @{$allssh->outfiles()})  {
         my ($host, $file) = @{$i} ;
         unlink($file);
     }
     exit;
   };

   $argv{"m"} ||= 50;
   
   $allssh->sourceonce(1);
   $allssh->source($argv{"source"});
   $allssh->rsync($argv{"rsource"});
   $allssh->pingfirst($argv{ping}||0);
   $allssh->maxflight($argv{m});
   $allssh->verbose($argv{v});
   $allssh->pause($argv{p} || 0);
   $allssh->format($argv{f});
   $allssh->cleanup(0);
   $allssh->maxtime($argv{"z"}||0);
   $allssh->randomize($argv{"randomize"}||0);
   $allssh->debugerrors(1) if ($argv{"V"}); # Don't "0" it in case $ENV{"DEBUGALLSH"} is set

print Dumper($allssh) if ($argv{"v"});

   #my $cmd = "rsync --bwlimit 10240 -a {rsync} $argv{dest}";
   my $cmd = "rsync -a {rsync} $argv{dest}";

   $cmd .= " --delete " if ($argv{"delete"});
   $cmd .= " --inkt-send-safe --inkt-recv-safe " if ($argv{"safe"});
   $cmd .= " {first:--compress} " if ($argv{"compress"});
   $cmd .= " --compress " if ($argv{"compressalways"});
   $cmd .= " $argv{extra} " if ($argv{extra});


   if ($argv{"n"}) {
     $cmd = "sleep 1 ; echo $cmd";
   }

   if (defined $argv{"exclude"}) {
     my @e = @{  $argv{"exclude"} };
     foreach my $e (@e) {
      if ($e =~ m/"/) {
#         die "I am not smart enough yet to escape $e, sorry\n";
      }
      $cmd .= " --exclude \"$e\"";
      
     }
   }

   # exclude dot files to avoid running into another instance
   $cmd .= " --exclude \".*\"";

  print "Cmd: $cmd\n" if ($argv{"v"});

  
   $allssh->command(join(",",@nodes),$cmd);
   my ($i);
   my ($aref);

   $aref = $allssh->downhosts();
   if ($aref) {
     foreach (@{$aref}) {
       print "ERROR: $_ down\n";
       $errors++;
     }
   }


   $aref = $allssh->outfiles();
   unless ($aref) {
     warn "ERROR: No nodes completed successfully.\n";
     exit 1;
   }

   foreach $i ( @{$allssh->outfiles()})  {
       my ($host, $file) = @{$i} ;
   #    print "$host: $file\n";
       my $error = $allssh->{exitcodes}{$host};
       if (($error) || (! $argv{"Q"})) {
         if (!(open(FILE,"$file"))) {
            warn "ERROR: could not open file $file\n";
            $errors++;
         } else {
              my $line;
              while(defined ($line=<FILE>)) {
              print "$host: $line";
            }
            close FILE;
         }
       }
       if ($error) {
            print "$host: exit status $error\n";
            unlink($file) unless ($argv{"s"});
            $errors++;
       } else { 
            unlink($file);
       }
   }

    
   
}

exit 1 if ($errors);

if ($argv{"pass2"}) {
  $argv{"path"}=$argv{"pass2"};
  delete $argv{"pass2"};
  delete $argv{"source"};
  delete $argv{"rsource"};
  delete $argv{"dest"};
  print "INFO: Second pass (symlinks)\n"; 
  goto doanotherpath;
}


sub showUsage {
  print "Usage: $0 [options] $usage\n";
  exit 0;
}


sub showOptionsHelp {
 my($left,$right,$a,$b,$key);
 my(@array);
 print "Usage: $0 [options] $usage\n";
 print "where options can be:\n";
 foreach $key (sort keys (%input)) {
    ($left,$right) = split(/[=:]/,$key);
    ($a,$b) = split(/\|/,$left);
    if ($b) {  
      $left = "-$a --$b";
    } else {
      $left = "   --$a";
    }
    $left = substr("$left" . (' 'x20),0,20);
    push(@array,"$left $input{$key}\n");
 }
 print sort @array;
}


  ###############################################################################
  # IF a user only says --path foo::bar/blah Figure out the source, destination #
  # on local disk, and the remote sources automatically                         #
  ###############################################################################


sub magicpath {
  my($magicpath) = @_;
  my($hostname,$mountpoint,$path,$realpath,$destpath,$isdir) = ();

  # Some very very specific replacements

  # Handle /export/crawlspace/foo
  if ($magicpath =~ m#^/#) {
     my $host = `hostname`;  chomp $host;
     $magicpath = "$host:$magicpath";
  }
  
  # Handle hostname:/export/crawlspace/foo into rsync url
  $magicpath =~ s#:/export/crawlspace/#::ec/#;
  $magicpath =~ s#:/export/crawlspace(\d+)/#::ec$1/#;
  $magicpath =~ s#:/home/admin/#::eh/#;


  # Now break up rsync style urls
  if ($magicpath =~ m#(.*)::([a-z0-9_]+)/(.*)$#) {
    ($hostname,$mountpoint,$path) = ($1,$2,$3);
  } else {
     die "Could not parse $magicpath as sourcehost::mountpoint/path";
  }

 
  my ($symcheck) = `rsync -l $magicpath`;
  if ($symcheck) {
   $symcheck =~ s#.*-> ##;
   $symcheck =~ s#\s+$##;
   print "INFO: symlink found, points to $symcheck when checking $magicpath\n";
   if ($argv{"release"}) {
      print "INFO: Scheduling two pass multiphasic\n";
      if (defined $argv{"source"}) {
        die "ERROR: $0 --release not compatible with --source\n";
      }
      if (defined $argv{"rsource"}) {
        die "ERROR: $0 --release not compatible with --rsource\n";
      }
      if (defined $argv{"dest"}) {
        die "ERROR: $0 --release not compatible with --dest\n";
      }
      if ($argv{"symcheck"} =~ m#/#) {
         die "Unfortunately, symlink targets with / in the name are not yet allowed.\n";
      }
      $argv{"pass2"}=$argv{"path"};
      $magicpath =~ s#^(.*/)?([^/]+)$#$1$symcheck#;
      $path =~ s#^(.*/)?([^/]+)$#$1$symcheck#;
      $argv{"pass2used"}=1;

      print "INFO: First pass will be $magicpath\n";
      delete $argv{"release"};
    } else {
      print "INFO: You might like --release, which will first copy $symcheck and THEN copy $path\n" unless (defined $argv{"pass2used"});
    }
   
  }


  # Find out where in rsyncd.conf it is and how to translate it
  print "Checking the status of $magicpath\n" if ($argv{"v"});
  my($dircheck) = `rsync $magicpath/. 2>&1`;
  if($dircheck =~ m#d.* \.$#) {
     $isdir = 1; 
     print "$magicpath is a directory\n"
  } elsif ($dircheck =~ m#^-#) {
     $isdir = 0;
     print "$magicpath is a file\n";
  } else {
     die "Asked rsync to fetch $magicpath; we got:\n$dircheck\nThis is not what we expected, perhaps the file does not exist?";
  }


  print "Reading local rsyncd.conf to translate path names\n" if ($argv{"v"});
  open(RSYNCCONF,"</etc/rsyncd.conf");
  my $mp;
  while(<RSYNCCONF>) {
   chomp;
   if (m#^\[(\S+)\]#) {
      $mp = $1; 
   } 
   if ((m#path\s*=\s*(\S+)#) && ($mp eq $mountpoint)) {
      $realpath = $1;
      last;
   }
  }
  close RSYNCCONF;

  unless (defined $realpath) {
    die "Could not find $mountpoint in /etc/rsyncd.conf for $magicpath";
  }


  $destpath = $path;

  if ($isdir) {
     # How do we trim things?
     $destpath =~ s#/$##;     # Trailing slash removal
     $destpath =~ s#/\.$##;   # Trailing "/." removal
     $destpath =~ s#[^/]+$##; # Remove the dir name entirely
                              # leaving the parent directory name
  }
  $destpath = "$realpath/$destpath";  # full form


  $argv{"source"} ||= "${hostname}::$mountpoint/$path";
  $argv{"rsource"} ||= "::$mountpoint/$path";
  $argv{"dest"} ||= $destpath;
  $argv{"x"} = (defined $argv{"x"}) ? ($argv{"x"} . ",$hostname") : $hostname;
  print <<"EOF" if ($argv{"v"});
DEBUG
  Derived and or user set values:
  --source  $argv{source}
  --dest    $argv{dest}
  --rsource $argv{rsource}
EOF

}
